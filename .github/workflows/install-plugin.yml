name: AppLaunch Install Plugin

on:
  workflow_dispatch:
    inputs:
      pluginId:
        description: "NuGet package ID of the plugin"
        required: true
        type: string
      pluginVersion:
        description: "Version of the plugin to install"
        required: true
        type: string

permissions:
  contents: write

jobs:
  install-plugin:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Install xmlstarlet
        run: sudo apt-get update && sudo apt-get install -y xmlstarlet

      - name: Set up Git
        run: |
          git config user.name "AppLaunch Bot"
          git config user.email "bot@applaunch.dev"

      - name: Ensure XML structure
        run: |
          # Ensure ItemGroup exists in Directory.Plugins.props
          if ! grep -q "<ItemGroup>" Directory.Plugins.props; then
            xmlstarlet ed --inplace \
              -s "/Project" -t elem -n ItemGroup -v "" \
              Directory.Plugins.props
          fi

          # Ensure ItemGroup exists in Directory.Build.targets
          if ! grep -q "<ItemGroup>" Directory.Build.targets; then
            xmlstarlet ed --inplace \
              -s "/Project" -t elem -n ItemGroup -v "" \
              Directory.Build.targets
          fi

      - name: Inject plugin into MSBuild files
        run: |
          PLUGIN_ID="${{ inputs.pluginId }}"
          PLUGIN_VERSION="${{ inputs.pluginVersion }}"

          # Inject into Directory.Plugins.props if missing
          if ! grep -q "Include=\"$PLUGIN_ID\"" Directory.Plugins.props; then
            xmlstarlet ed --inplace \
              -s "/Project/ItemGroup" -t elem -n PackageVersion -v "" \
              -i "/Project/ItemGroup/PackageVersion[last()]" -t attr -n Include -v "$PLUGIN_ID" \
              -i "/Project/ItemGroup/PackageVersion[last()]" -t attr -n Version -v "$PLUGIN_VERSION" \
              Directory.Plugins.props
            echo "✔️ Added $PLUGIN_ID to Directory.Plugins.props"
          else
            echo "✅ $PLUGIN_ID already exists in Directory.Plugins.props"
          fi

          # Inject into Directory.Build.targets if missing
          if ! grep -q "Include=\"$PLUGIN_ID\"" Directory.Build.targets; then
            xmlstarlet ed --inplace \
              -s "/Project/ItemGroup" -t elem -n PackageReference -v "" \
              -i "/Project/ItemGroup/PackageReference[last()]" -t attr -n Include -v "$PLUGIN_ID" \
              Directory.Build.targets
            echo "✔️ Added $PLUGIN_ID to Directory.Build.targets (no version)"
          else
            echo "✅ $PLUGIN_ID already exists in Directory.Build.targets"
          fi

      - name: Commit changes
        run: |
          git add Directory.Plugins.props Directory.Build.targets
          git commit -m "Install plugin ${{ inputs.pluginId }} v${{ inputs.pluginVersion }}" || echo "No changes to commit"

      - name: Push to main
        run: git push origin main
